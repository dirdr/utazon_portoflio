name: cd-pipeline
on:
  workflow_dispatch:
    inputs:
      version:
        description: "semver"
        required: true
        type: string
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "üöÄ Deploying"
            echo "SSH connection successful!"

            VERSION="${{ github.event.inputs.version }}"
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            APP_NAME="${{ vars.APP_NAME }}"
            BASE_DIR="${{ vars.BASE_DIR }}"
            PROJECT_DIR="$BASE_DIR/$ENVIRONMENT"

            echo "üìã Deployment Configuration:"
            echo "   Version: $VERSION"
            echo "   Environment: $ENVIRONMENT"
            echo "   App Name: $APP_NAME"
            echo "   Project Directory: $PROJECT_DIR"

            cd "$PROJECT_DIR" || { echo "üí• Project directory not found: $PROJECT_DIR"; exit 1; }

            if [ ! -f "docker-compose.yaml" ]; then
              echo "üí• docker-compose.yaml not found in $PROJECT_DIR"
              exit 1
            fi

            if [ ! -f ".env" ]; then
              echo "üí• .env file not found in $PROJECT_DIR"
              exit 1
            fi

            check_image_exists() {
              local image="$1"
              echo "üîç Checking if image exists: $image"
              if docker manifest inspect "$image" > /dev/null 2>&1; then
                echo "‚úÖ Image found: $image"
                return 0
              else
                echo "‚ùå Image not found: $image"
                return 1
              fi
            }

            TARGET_IMAGE="$DOCKER_USERNAME/$APP_NAME:$VERSION"

            if check_image_exists "$TARGET_IMAGE"; then
              echo "üéØ Using specified version: $VERSION"
              DEPLOY_VERSION="$VERSION"
            else
              echo "üí• Specified version not found: $TARGET_IMAGE"
              echo "‚ùå Deployment aborted - image does not exist!"
              exit 1
            fi

            cp ".env" ".env.backup"

            # Update or add IMAGE_VERSION in env file
            if grep -q "^IMAGE_VERSION=" ".env"; then
              sed -i "s/^IMAGE_VERSION=.*/IMAGE_VERSION=$DEPLOY_VERSION/" ".env"
            else
              echo "IMAGE_VERSION=$DEPLOY_VERSION" >> ".env"
            fi

            echo "‚úÖ Updated IMAGE_VERSION to: $DEPLOY_VERSION"
            echo "üìÑ Current .env content:"
            cat .env | grep -E "(IMAGE_VERSION|APP_NAME)" || echo "IMAGE_VERSION=$DEPLOY_VERSION"

            docker-compose ps || true

            docker-compose pull

            echo "üó∫Ô∏è  Generating sitemap and robots.txt..."
            docker-compose --profile init up utazon-sitemap-$ENVIRONMENT utazon-robots-$ENVIRONMENT

            echo "üöÄ Starting main application..."
            docker-compose up -d utazon-$ENVIRONMENT

            sleep 5

            if docker-compose ps | grep -q "Up"; then
              echo "‚úÖ Deployment successful!"
              
              echo "üßπ Cleaning up old images..."
              docker image prune -f
              
              rm -f ".env.backup"
              
            else
              echo "üí• Deployment failed! Rolling back..."
              
              mv ".env.backup" ".env"
              
              docker-compose up -d utazon-$ENVIRONMENT
              
              echo "üìú Error logs:"
              docker-compose logs --tail=50
              
              exit 1
            fi

            echo "=================================="
            echo "üèÅ Deployment completed successfully!"
            echo "üåç Environment: $ENVIRONMENT"
            echo "üè∑Ô∏è  Version: $DEPLOY_VERSION"
            echo "üìÅ Directory: $PROJECT_DIR"
            echo "=================================="
  notification:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Send discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: "@here The portfolio, with version ${{ github.event.inputs.version }} has been deployed to ${{ github.event.inputs.environment }}"
